/*
  Usamos @tailwind base, components, y utilities para que Tailwind
  inyecte sus estilos, pero al usar el CDN, no necesitamos estas directivas aquí.
  Este archivo es para nuestros estilos personalizados.
*/

/*
  Definimos las clases que no están directamente en Tailwind,
  o que queremos que sean reutilizables.
  El JavaScript agregará o quitará la clase "active" de los botones.
*/
.tab-button {
    /* Padding (px-3 py-2) */
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;

    /* Texto (font-medium text-sm text-gray-500) */
    font-size: 0.875rem;
    font-weight: 500;
    color: rgb(107 114 128);

    /* Borde (rounded-t-md border-b-2 border-transparent) */
    border-top-left-radius: 0.375rem;
    border-top-right-radius: 0.375rem;
    border-bottom-width: 2px;
    border-bottom-color: transparent;

    /* Transición (transition-colors duration-200) */
    transition-property: color, border-color;
    transition-duration: 200ms;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

/*
  Efectos hover y focus, que se definen por separado
  en CSS estándar.
*/
.tab-button:hover {
    color: rgb(55 65 81); /* hover:text-gray-700 */
    border-bottom-color: rgb(209 213 219); /* hover:border-gray-300 */
}

.tab-button:focus {
    outline: none; /* focus:outline-none */
}

/* Clase "active" para la pestaña seleccionada */
.tab-button.active {
    color: rgb(37 99 235); /* text-blue-600 */
    border-bottom-color: rgb(37 99 235); /* border-blue-600 */
}

/*
  La animación es CSS estándar, así que funciona perfectamente
  y no necesita cambios.
*/
.tab-pane {
    animation: fadeIn 0.5s;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}